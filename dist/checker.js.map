{"version":3,"sources":["../src/checker.ts"],"names":["arrayToObject","list","handler","result","key","Checker","checkRule","obj","record","success","CheckerRecord","check","message","add","Object","keys","length","addRecord","Array","isArray","Error","objKeys","node","CheckerChunk","has"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAeA,SAASA,aAAT,CACEC,IADF,EAEEC,OAFF,EAKE;AACA,MAAMC,MAAM,GAAG,EAAf;;AADA,6CAEkBF,IAFlB;AAAA;;AAAA;AAEA,wDAAwB;AAAA,UAAbG,IAAa;AACtBD,MAAAA,MAAM,CAACC,IAAD,CAAN,GAAc,OAAOF,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAACE,IAAD,CAAvC,GAA+CF,OAA7D;AACD;AAJD;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAOC,MAAP;AACD;;IAEoBE,O;AAGnB,mBAAYC,SAAZ,EAAiCC,GAAjC,EAAyCC,MAAzC,EAAiE;AAAA;AAAA;AAAA;AAC/D,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKD,MAAL,GAAcA,MAAd,aAAcA,MAAd,cAAcA,MAAd,GAAwB,IAAIE,kBAAJ,EAAxB;AACA,SAAKC,KAAL,CAAWL,SAAX,EAAsBC,GAAtB;AACD;;;;WACD,mBAAkBK,OAAlB,EAA4C;AAC1C,WAAKH,OAAL,GAAe,KAAf;AACA,aAAO,KAAKD,MAAL,CAAYK,GAAZ,CAAgBD,OAAhB,CAAP;AACD;;;WACD,eACEN,SADF,EAEEC,GAFF,EAGQ;AACN,UAAI,yBAAOA,GAAP,MAAe,QAAnB,EAA6B;AAC3B,YAAI,OAAOD,SAAP,KAAqB,WAAzB,EAAsC;AACtC,YAAI,yBAAOA,SAAP,MAAqB,QAArB,IAAiCQ,MAAM,CAACC,IAAP,CAAYT,SAAZ,EAAuBU,MAAvB,KAAkC,CAAvE,EACE;AACF,aAAKC,SAAL,CAAe,aAAf;AACA;AACD,OAND,MAMO,IAAIC,KAAK,CAACC,OAAN,CAAcZ,GAAd,CAAJ,EAAwB;AAC7B,aAAKU,SAAL,CAAe,aAAf;AACA;AACD;;AACD,UAAI,yBAAOX,SAAP,MAAqB,QAAzB,EACE,MAAM,IAAIc,KAAJ,CAAU,gDAAV,CAAN;AACF,UAAMC,OAAO,GAAGrB,aAAa,CAACc,MAAM,CAACC,IAAP,CAAYR,GAAZ,CAAD,CAA7B;;AAbM,kDAcY,KAAKC,MAAL,CAAYc,IAAZ,CAAiBhB,SAAjB,CAdZ;AAAA;;AAAA;AAcN,+DAA+C;AAAA,cAApCF,KAAoC;AAC7C,iBAAOiB,OAAO,CAACjB,KAAD,CAAd;AACA,cACE,CAAC,IAAImB,wBAAJ,CAAiBjB,SAAS,CAACF,KAAD,CAA1B,EAAiCG,GAAG,CAACH,KAAD,CAApC,EAA2C,KAAKI,MAAhD,EAAwD;AACvDgB,YAAAA,GAAG,EAAEpB,KAAG,IAAIG;AAD2C,WAAxD,EAEEE,OAHL,EAKE,KAAKA,OAAL,GAAe,KAAf;AACH;AAtBK;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAuBW,KAAKD,MAAL,CAAYc,IAAZ,CAAiBD,OAAjB,CAvBX;AAAA;;AAAA;AAuBN,+DAA4C;AAAA;AAC1C,eAAKb,MAAL,CAAYK,GAAZ,CAAgB,YAAhB;AACD;AAzBK;AAAA;AAAA;AAAA;AAAA;AA0BP","sourcesContent":["import CheckerChunk from \"./checkerChunk\";\nimport CheckerRecord from \"./record\";\nimport { Enumerable } from \"./type\";\n\nexport type Rule<V> = Rules<V> | CheckFunction<V>;\n\nexport type Rules<T> = T extends Record<string, unknown>\n  ? {\n      [K in keyof T]?: Enumerable<Rule<T[K]>>;\n    }\n  : never;\n\nexport interface CheckFunction<V> {\n  (value: V, meta: Record<string, unknown>): CheckerRecord | string | boolean;\n}\n\nfunction arrayToObject<T = undefined>(\n  list: string[],\n  handler?: T\n): {\n  [key: string]: T extends (...args: unknown[]) => unknown ? ReturnType<T> : T;\n} {\n  const result = {};\n  for (const key of list) {\n    result[key] = typeof handler === \"function\" ? handler(key) : handler;\n  }\n  return result;\n}\n\nexport default class Checker<T extends Record<string, unknown>> {\n  success: boolean;\n  record: CheckerRecord;\n  constructor(checkRule: Rules<T>, obj: T, record?: CheckerRecord) {\n    this.success = true;\n    this.record = record ?? new CheckerRecord();\n    this.check(checkRule, obj);\n  }\n  private addRecord(message: string): boolean {\n    this.success = false;\n    return this.record.add(message);\n  }\n  private check<U extends Record<string, unknown>>(\n    checkRule: Rules<U>,\n    obj: U\n  ): void {\n    if (typeof obj !== \"object\") {\n      if (typeof checkRule === \"undefined\") return;\n      if (typeof checkRule === \"object\" && Object.keys(checkRule).length === 0)\n        return;\n      this.addRecord(\"Not object.\");\n      return;\n    } else if (Array.isArray(obj)) {\n      this.addRecord(\"Not object.\");\n      return;\n    }\n    if (typeof checkRule !== \"object\")\n      throw new Error(\"The argument `checkRule` must to be an object.\");\n    const objKeys = arrayToObject(Object.keys(obj));\n    for (const key of this.record.node(checkRule)) {\n      delete objKeys[key];\n      if (\n        !new CheckerChunk(checkRule[key], obj[key], this.record, {\n          has: key in obj,\n        }).success\n      )\n        this.success = false;\n    }\n    for (const {} of this.record.node(objKeys)) {\n      this.record.add(\"Redundant.\");\n    }\n  }\n}\n"],"file":"checker.js"}