{"version":3,"sources":["../../src/functions/arrayStruct.ts"],"names":["arrayStructChecker","rules","require","value","Array","isArray","record","CheckerRecord","node","index","CheckerChunk"],"mappings":";;;;;;;;;AACA;;AACA;;;;;;;;AAGO,SAASA,kBAAT,CACLC,KADK,EAGe;AAAA,MADpBC,OACoB,uEADV,KACU;;AACpB,SAAO,UAACC,KAAD,EAAW;AAChB,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B,OAAO,CAACD,OAAR;AAC3B,QAAMI,MAAM,GAAG,IAAIC,kBAAJ,EAAf;;AAFgB,+CAGID,MAAM,CAACE,IAAP,CAAYL,KAAZ,CAHJ;AAAA;;AAAA;AAGhB,0DAAwC;AAAA,YAA7BM,KAA6B;AACtC,YAAIC,wBAAJ,CAAiBT,KAAjB,EAAwBE,KAAK,CAACM,KAAD,CAA7B,EAAsCH,MAAtC;AACD;AALe;AAAA;AAAA;AAAA;AAAA;;AAMhB,WAAOA,MAAP;AACD,GAPD;AAQD","sourcesContent":["import { CheckFunction, Rule } from \"~/checker\";\nimport CheckerChunk from \"~/checkerChunk\";\nimport CheckerRecord from \"~/record\";\nimport { Enumerable } from \"~/type\";\n\nexport function arrayStructChecker<T>(\n  rules: Enumerable<Rule<T>>,\n  require = false\n): CheckFunction<T[]> {\n  return (value) => {\n    if (!Array.isArray(value)) return !require;\n    const record = new CheckerRecord();\n    for (const index of record.node(value)) {\n      new CheckerChunk(rules, value[index], record);\n    }\n    return record;\n  };\n}\n"],"file":"arrayStruct.js"}