{"version":3,"sources":["../../src/functions/type.ts"],"names":["typeChecker","require","types","value","meta","has","undefined","Array","isArray","length","type","join","typeStructChecker","typeWithRule","typeCheck","Object","keys","result","record","CheckerRecord","rules","CheckerChunk"],"mappings":";;;;;;;;;;;;;;AACA;;AACA;;;;;;;;AAGO,SAASA,WAAT,CACLC,OADK,EAGmB;AAAA,oCADrBC,KACqB;AADrBA,IAAAA,KACqB;AAAA;;AACxB,SAAO,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACtB,QACEH,OAAO,KAAK,KAAZ,KACC,CAACG,IAAI,CAACC,GAAN,IAAaF,KAAK,KAAK,IAAvB,IAA+BA,KAAK,KAAKG,SAD1C,CADF,EAIE,OAAO,EAAP;AACF,QAAI,CAACF,IAAI,CAACC,GAAV,EAAe,OAAO,UAAP;AACf,QAAI,CAACE,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAD,IAAyBA,KAAK,CAACO,MAAN,KAAiB,CAA9C,EAAiD,OAAO,IAAP;;AAP3B,+CAQHP,KARG;AAAA;;AAAA;AAQtB,0DAA0B;AAAA,YAAfQ,IAAe;;AACxB,gBAAQA,IAAR;AACE,eAAK,OAAL;AACE,gBAAIH,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B,OAAO,IAAP;AAC1B;;AACF;AACE,gBAAI,yBAAOA,KAAP,MAAiBO,IAArB,EAA2B,OAAO,IAAP;AAC3B;AANJ;AAQD;AAjBqB;AAAA;AAAA;AAAA;AAAA;;AAkBtB,qCAA0BR,KAAK,CAACS,IAAN,CAAW,IAAX,CAA1B;AACD,GAnBD;AAoBD;;AAEM,SAASC,iBAAT,CACLX,OADK,EAELY,YAFK,EAGa;AAClB,MAAMC,SAAS,GAAGd,WAAW,MAAX,UAChBC,OADgB,6CAEZc,MAAM,CAACC,IAAP,CAAYH,YAAZ,CAFY,GAAlB;AAIA,SAAO,UAACV,KAAD,EAAQC,IAAR,EAAiB;AACtB,QAAMa,MAAM,GAAGH,SAAS,CAACX,KAAD,EAAQC,IAAR,CAAxB;AACA,QACG,OAAOa,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACR,MAAP,GAAgB,CAA/C,IACC,OAAOQ,MAAP,KAAkB,QAAlB,IAA8B,CAACA,MAFlC,EAIE,OAAOA,MAAP;AACF,QAAMC,MAAM,GAAG,IAAIC,kBAAJ,EAAf;AACA,QAAMC,KAAK,GAAGP,YAAY,0BAAQV,KAAR,EAA1B;AACA,QAAIkB,wBAAJ,CAAiBD,KAAjB,EAAwBjB,KAAxB,EAA+Be,MAA/B;AACA,WAAOA,MAAP;AACD,GAXD;AAYD","sourcesContent":["import { CheckFunction, Rule } from \"~/checker\";\nimport CheckerChunk from \"~/checkerChunk\";\nimport CheckerRecord from \"~/record\";\nimport { Enumerable, Type } from \"~/type\";\n\nexport function typeChecker(\n  require: boolean,\n  ...types: Type[]\n): CheckFunction<unknown> {\n  return (value, meta) => {\n    if (\n      require === false &&\n      (!meta.has || value === null || value === undefined)\n    )\n      return \"\";\n    if (!meta.has) return \"Require.\";\n    if (!Array.isArray(types) || types.length === 0) return true;\n    for (const type of types) {\n      switch (type) {\n        case \"array\":\n          if (Array.isArray(value)) return true;\n          break;\n        default:\n          if (typeof value === type) return true;\n          break;\n      }\n    }\n    return `Must to be a/an ${types.join(\", \")} type.`;\n  };\n}\n\nexport function typeStructChecker<T>(\n  require: boolean,\n  typeWithRule: Record<Type, Enumerable<Rule<T>>>\n): CheckFunction<T> {\n  const typeCheck = typeChecker(\n    require,\n    ...(Object.keys(typeWithRule) as Type[])\n  );\n  return (value, meta) => {\n    const result = typeCheck(value, meta);\n    if (\n      (typeof result === \"string\" && result.length > 0) ||\n      (typeof result !== \"string\" && !result)\n    )\n      return result;\n    const record = new CheckerRecord();\n    const rules = typeWithRule[typeof value];\n    new CheckerChunk(rules, value, record);\n    return record;\n  };\n}\n"],"file":"type.js"}