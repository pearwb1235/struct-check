{"version":3,"sources":["../src/checkerChunk.ts"],"names":["CheckerChunk","rules","value","record","meta","success","Array","isArray","rule","check","add","Checker","result","CheckerRecord","get","key","Object","keys","length","Error"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;IAGqBA,Y;AAInB,wBACEC,KADF,EAEEC,KAFF,EAGEC,MAHF,EAKE;AAAA,QADAC,IACA,uEADgC,EAChC;AAAA;AAAA;AAAA;AAAA;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,OAAL,GAAe,IAAf;AACA,SAAKD,IAAL,GAAYA,IAAZ;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAJ,EAA0B;AAAA,iDACLA,KADK;AAAA;;AAAA;AACxB,4DAA0B;AAAA,cAAfO,IAAe;;AACxB,cAAI,CAAC,KAAKC,KAAL,CAAWP,KAAX,EAAkBM,IAAlB,CAAL,EAA8B;AAC5B,iBAAKH,OAAL,GAAe,KAAf;AACA;AACD;AACF;AANuB;AAAA;AAAA;AAAA;AAAA;AAOzB,KAPD,MAOO,IAAI,CAAC,KAAKI,KAAL,CAAWP,KAAX,EAAkBD,KAAlB,CAAL,EAA+B,KAAKI,OAAL,GAAe,KAAf;AACvC;;;;WACD,eAAcH,KAAd,EAAwBM,IAAxB,EAAuC;AACrC,uCAAeA,IAAf;AACE,aAAK,QAAL;AACE,cAAI,yBAAON,KAAP,MAAiB,QAAjB,IAA6BI,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAjC,EACE,OAAO,KAAKC,MAAL,CAAYO,GAAZ,CAAgB,sBAAhB,CAAP;AACF,iBAAO,IAAIC,mBAAJ,CAAYH,IAAZ,EAAkBN,KAAlB,EAAoD,KAAKC,MAAzD,EACJE,OADH;;AAEF,aAAK,UAAL;AACE,cAAMO,MAAM,GAAGJ,IAAI,CAACN,KAAD,EAAQ,KAAKE,IAAb,CAAnB;;AACA,cAAIQ,MAAM,YAAYC,kBAAtB,EAAqC;AACnC,gBAAMV,MAAM,GAAGS,MAAM,CAACE,GAAP,EAAf;;AACA,iBAAK,IAAMC,GAAX,IAAkBZ,MAAlB;AAA0B,mBAAKA,MAAL,CAAYO,GAAZ,CAAgBP,MAAM,CAACY,GAAD,CAAtB,EAA6BA,GAA7B;AAA1B;;AACA,mBAAOC,MAAM,CAACC,IAAP,CAAYd,MAAZ,EAAoBe,MAApB,KAA+B,CAAtC;AACD,WAJD,MAIO,IAAI,OAAON,MAAP,KAAkB,QAAtB,EAAgC;AACrC,gBAAIA,MAAM,CAACM,MAAP,GAAgB,CAApB,EAAuB,OAAO,KAAKf,MAAL,CAAYO,GAAZ,CAAgBE,MAAhB,CAAP;AACxB,WAFM,MAEA,IAAI,CAACA,MAAL,EACL,OAAO,KAAKT,MAAL,CAAYO,GAAZ,CAAgB,gCAAhB,CAAP;;AACF,iBAAO,IAAP;;AACF;AACE,gBAAM,IAAIS,KAAJ,CAAU,mCAAV,CAAN;AAlBJ;;AAoBA,aAAO,IAAP;AACD","sourcesContent":["import Checker, { Rule } from \"./checker\";\nimport CheckerRecord from \"./record\";\nimport { Enumerable } from \"./type\";\n\nexport default class CheckerChunk<T> {\n  record: CheckerRecord;\n  success: boolean;\n  meta: Record<string, unknown>;\n  constructor(\n    rules: Enumerable<Rule<T>>,\n    value: T,\n    record: CheckerRecord,\n    meta: Record<string, unknown> = {}\n  ) {\n    this.record = record;\n    this.success = true;\n    this.meta = meta;\n    if (Array.isArray(rules)) {\n      for (const rule of rules) {\n        if (!this.check(value, rule)) {\n          this.success = false;\n          break;\n        }\n      }\n    } else if (!this.check(value, rules)) this.success = false;\n  }\n  private check(value: T, rule: Rule<T>) {\n    switch (typeof rule) {\n      case \"object\":\n        if (typeof value !== \"object\" || Array.isArray(value))\n          return this.record.add(\"Must to be an object\");\n        return new Checker(rule, value as Record<string, unknown>, this.record)\n          .success;\n      case \"function\":\n        const result = rule(value, this.meta);\n        if (result instanceof CheckerRecord) {\n          const record = result.get();\n          for (const key in record) this.record.add(record[key], key);\n          return Object.keys(record).length === 0;\n        } else if (typeof result === \"string\") {\n          if (result.length > 0) return this.record.add(result);\n        } else if (!result)\n          return this.record.add(\"Checker function match failed.\");\n        return true;\n      default:\n        throw new Error(\"The argument `rule` is not valid.\");\n    }\n    return true;\n  }\n}\n"],"file":"checkerChunk.js"}